<?php
declare(strict_types=1); // режим строой типизации
echo "Пользовательские функции: Именованные / Анонимные <br>";

// именованные фунцкции

// function имя_функции($arg1, &$arg2, $arg3=default, ...$args){
// $arg1 - передача аргументов
// &$arg2 - передача аргуметов по ссылке
// $arg3=default аргументы со значением по умолчанию( необязательные), должны идти после обязательных
// ...$args - переменноё колличество аргументов,должны идти после всех остальных аргументов

// тело функции
// return - прерывает работу функции и возвращает результат

// return 'возращаемое значение';
// }

// вызов функции( именованные функции можно вызвать до их объявления)
// имя_функции(данные);

// функция division принимает на вход 2 аргумента
// возвращает результат деления первого аргумента  на второй аргумент
function division($a, $b){ 
    if(!is_int($a) && !is_float($a) || !is_int($b) && !is_float($b)){
        return false;
    }
    if($b === 0){
        echo "Делить на 0 нельзя!";
        return false;
    }
    return $a / $b;
    
}

division(2, 0);

division('Heloo', [34, 89]) ;

// передача аргументов по ссылке &$arg ( изменение массива)
function change_str(&$some_str){
    $some_str .= ' после преобразования';
    
}

$str = 'строка';

change_str($str);

var_dump($str);

// значение аргументов по умолчанию, если аргумент обязателен то функцию без него вызывать нельзя
function greeting($user = 'Гость'){ 
    echo "Добро пожаловать, $user <br>";
}

greeting(); // нужно значение по умолчанию что бы была возможность использовать функцию без аргумента
greeting('Владимир');

// переменное колличество аргументов ...$args

function get_sum(...$nums){
    // $nums - массив
    return array_sum($nums);
}

var_dump(get_sum(34, 12));
var_dump(get_sum(34, 12, 89, -100));

// указание типа аргумента и типа возращаемого значения
// PHP 5 тип аргумента: array, имя класса
// PHP 5.4 тип аргумента: array, имя класса + callable
// PHP 7.0 тип аргумента: array, имя класса, callable +
// скалярные типы

// PHP 7.0 тип возращаемого значение :тип
// PHP 7.1 обнуляемый тип ?тип
 
// function имя_функции ( тип_аргумента $аргумент) :тип{}

function sum(int $a, float $b) :float{
    return $a + $b;
}
// без режима строгой типизации, будет происходить приведение типов
// var_dump(sum(false, 5.6));
var_dump(sum(45, 78));

// анонимные функции
$pos_num = function($num){
    // вурнуть true, если $num больше 0
    // и false, если меньше или равно 0
    return $num >0;
};
// операторы сравнения возращают true / false 
// вызов анонимной функции 
var_dump($pos_num(45));
var_dump($pos_num( -45));
var_dump($pos_num(0));

// is_callable функция ли это, проверяет на тип данных
var_dump(is_callable($pos_num));
var_dump(is_callable('sum')); // при проверке именованной функции имя функции заключают в ''

function get_info(){
    echo 'INFO';
}

// вызов функции через переменные
$some_str = 'get_info';
$some_str(); // === get_info()


$some_var = 'переменная вне функции';
const OUT_CONST = 'константа вне функции';

// внутри функции к внешней переменной мы обратиться не можем, единственное что мы можем сделать это передать переменную как аргумент
function some_func($some_var){
    // обращаемся к внешней переменной
    var_dump($some_var);
    // обращаемся к константе
    var_dump(OUT_CONST);
    $some_var = 'локальная переменная функции'; // нельзя обратиться вне функции
}
var_dump($some_var);
some_func($some_var);

// static переменная в функциях, будет накапливать данные при каждом следующем вызове

function counter(){
    static $counter_var = 0;
    $counter_var++;
    return $counter_var;
}
var_dump(counter());
var_dump(counter());


